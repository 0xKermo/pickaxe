// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: indexer.sql

package db

import (
	"context"
	"database/sql"
)

const getIndexerStatus = `-- name: GetIndexerStatus :one
SELECT id, last_queried, last_updated FROM indexer
WHERE id = 0 LIMIT 1
`

func (q *Queries) GetIndexerStatus(ctx context.Context) (Indexer, error) {
	row := q.db.QueryRowContext(ctx, getIndexerStatus)
	var i Indexer
	err := row.Scan(&i.ID, &i.LastQueried, &i.LastUpdated)
	return i, err
}

const initIndexer = `-- name: InitIndexer :one
INSERT INTO indexer (
  id,
  last_queried,
  last_updated
) VALUES (
  0, $1, NOW()
) RETURNING id, last_queried, last_updated
`

func (q *Queries) InitIndexer(ctx context.Context, lastQueried sql.NullInt64) (Indexer, error) {
	row := q.db.QueryRowContext(ctx, initIndexer, lastQueried)
	var i Indexer
	err := row.Scan(&i.ID, &i.LastQueried, &i.LastUpdated)
	return i, err
}

const updateIndexerStatus = `-- name: UpdateIndexerStatus :one
UPDATE indexer
SET last_queried = $1 AND last_updated = NOW()
WHERE id = 0
RETURNING id, last_queried, last_updated
`

func (q *Queries) UpdateIndexerStatus(ctx context.Context, lastQueried sql.NullInt64) (Indexer, error) {
	row := q.db.QueryRowContext(ctx, updateIndexerStatus, lastQueried)
	var i Indexer
	err := row.Scan(&i.ID, &i.LastQueried, &i.LastUpdated)
	return i, err
}
